Name:Kashaf Ahmad
Sap ID: 53155



Task 1:
#include <iostream>
using namespace std;
class node{
	public:
	char data;
	  node *left;
	  node *right;
	  node()
	  {
	  	data = ' ';
	  	left=NULL;
	  	right = NULL;
	  }
	  
	  node(char data)
	  {
	  	this->data=data;
	  	this->left=NULL;
	  	this->right=NULL;
	  }
	  void preorder(node *ptr)
	  {
	  	if(ptr!=NULL)
	  	{
	  		cout<<ptr->data<<" ";
	  		preorder(ptr->left);
	  		preorder(ptr->right);
		}
	}
	  void inorder(node *ptr)
	  {
	  if(ptr!=NULL)
	  	{
	  	
	  		inorder(ptr->left);
	  		cout<<ptr->data<<" ";
	  		inorder(ptr->right);
	  	
		  }	
	  }
	  void postorder(node *ptr)
	  {
	  if(ptr!=NULL)
	  	{
	  	
	  		postorder(ptr->left);
	  		postorder(ptr->right);
	  	    cout<<ptr->data<<" ";
		  }	
	}
	
	
};

int main()
{   

    node tree;
	node *root=new node('A');
	root->left=new node('B');
	root->right=new node('C');
	root->left->left=new node('D');
	root->left->right=new node('E');
	root->right->left=new node('F');
	root->right->right=new node('G');
	
	node n;
	n.preorder(root);
	cout<<endl;
	n.inorder(root);
	cout<<endl;
	n.postorder(root);
	cout<<endl;
	
	
}
 


Task 2:

#include <iostream>
using namespace std;
class node{
	public:
	int data;
	  node *left;
	  node *right;
	  node()
	  {
	  	data = ' ';
	  	left=NULL;
	  	right = NULL;
	  }
	  
	  node(int data)
	  {
	  	this->data=data;
	  	this->left=NULL;
	  	this->right=NULL;
	  }
	  void preorder(node *ptr)
	  {
	  	if(ptr!=NULL)
	  	{
	  		cout<<ptr->data<<" ";
	  		preorder(ptr->left);
	  		preorder(ptr->right);
		}
	}
	  void inorder(node *ptr)
	  {
	  if(ptr!=NULL)
	  	{
	  	
	  		inorder(ptr->left);
	  		cout<<ptr->data<<" ";
	  		inorder(ptr->right);
	  	
		  }	
	  }
	  void postorder(node *ptr)
	  {
	  if(ptr!=NULL)
	  	{
	  	
	  		postorder(ptr->left);
	  		postorder(ptr->right);
	  	    cout<<ptr->data<<" ";
		  }	
	}
	
	
};

int main()
{   

    node tree;
	node *root=new node(1);
	root->left=new node(2);
	root->right=new node(3);
	root->left->left=new node(4);
	root->left->right=new node(5);
	root->right->left=new node(8);
	root->right->right=new node(7);
	
	node n;
	n.preorder(root);
	cout<<endl;
	n.inorder(root);
	cout<<endl;
	n.postorder(root);
	cout<<endl;
	
	
}
 